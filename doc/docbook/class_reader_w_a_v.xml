<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_reader_w_a_v" xml:lang="en-US">
<title>ReaderWAV Class Reference</title>
<indexterm><primary>ReaderWAV</primary></indexterm>
<para>

<para>A class to read and handle WAV audio files. </para>
 
</para>
<para>
<computeroutput>#include &lt;ReaderWAV.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_reader_w_a_v_1a41d7ecb1c6790f79c520d6ce0623c4ca">ReaderWAV</link> (std::string input_file_path)</para>

<para>Constructor for the <link linkend="_class_reader_w_a_v">ReaderWAV</link> class. </para>
</listitem>
            <listitem><para>void <link linkend="_class_reader_w_a_v_1a6a6ac0dc724315a44252779495b85596">OpenWAVFile</link> ()</para>

<para>Opens the WAV file_ for reading. </para>
</listitem>
            <listitem><para>void <link linkend="_class_reader_w_a_v_1a726d7fa9cc02967c064985c1487321fa">CloseWAVFile</link> ()</para>

<para>Closes the WAV file_. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_reader_w_a_v_1af830b5a8e7f297d9cd067f45274d77d1"/>void <emphasis role="strong">ReadHead</emphasis> ()</para>

<para>Reads the header of the WAV file. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_reader_w_a_v_1acbff9b51afd07eff263b3a7c0c14a230">CheckingFileValidity</link> () const</para>

<para>Validates that the WAV file is in the proper format and has specific properties. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_reader_w_a_v_1a9fd66bdaac9e11f0ea3ea64ab6b4f750">GetSamples</link> (std::vector&lt; int16_t &gt; &amp;samples, uint32_t start, uint32_t end)</para>

<para>Reads a portion of audio samples from the WAV file. </para>
</listitem>
            <listitem><para><link linkend="_struct_w_a_v_header">WAVHeader</link> * <link linkend="_class_reader_w_a_v_1af4bfc648f45dff4c0356ffa2edce1bf4">GetWAVHeader</link> () const</para>

<para>Retrieves the WAV header. This method returns a pointer to the WAVHeader_. WAV Header defined in file &quot;WAVHeader.h&quot;. </para>
</listitem>
            <listitem><para>int <link linkend="_class_reader_w_a_v_1af75aa91878df2c24afb5646bf244323f">GetSizeFileInSec</link> () const</para>

<para>Calculates the size of the WAV file in seconds. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A class to read and handle WAV audio files. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_reader_w_a_v_1a41d7ecb1c6790f79c520d6ce0623c4ca"/><section>
    <title>ReaderWAV()</title>
<indexterm><primary>ReaderWAV</primary><secondary>ReaderWAV</secondary></indexterm>
<indexterm><primary>ReaderWAV</primary><secondary>ReaderWAV</secondary></indexterm>
<para><computeroutput>ReaderWAV::ReaderWAV (std::string input_file_path)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor for the <link linkend="_class_reader_w_a_v">ReaderWAV</link> class. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>input_file_path</entry><entry>
<para>The path to the input WAV file. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_reader_w_a_v_1acbff9b51afd07eff263b3a7c0c14a230"/><section>
    <title>CheckingFileValidity()</title>
<indexterm><primary>CheckingFileValidity</primary><secondary>ReaderWAV</secondary></indexterm>
<indexterm><primary>ReaderWAV</primary><secondary>CheckingFileValidity</secondary></indexterm>
<para><computeroutput>bool ReaderWAV::CheckingFileValidity ( ) const</computeroutput></para><para>

<para>Validates that the WAV file is in the proper format and has specific properties. </para>
</para>

<para>Checks the validity of the WAV file.</para>

<para>This method checks the header of the WAV file to ensure that it is a valid WAV file and that it meets the required properties for this program. Specifically, it checks:<itemizedlist>
<listitem>
<para>The chunk ID is &quot;RIFF&quot; and the RIFF type ID is &quot;WAVE&quot;.</para>
</listitem><listitem>
<para>The format tag is PCM (1).</para>
</listitem><listitem>
<para>The number of channels is 1 (mono audio).</para>
</listitem><listitem>
<para>The sample rate is 44100 Hz.</para>
</listitem><listitem>
<para>The bits per sample is 16.</para>
</listitem></itemizedlist>
</para>

<para>If any of these conditions are not met, the method throws a std::runtime_error with an appropriate message. If all conditions are met, the method returns true.</para>

<para><formalpara><title>Returns</title>

<para>true if the WAV file is valid and meets the required properties. </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::runtime_error</entry><entry>
<para>if the WAV file is not valid or does not meet the required properties.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the file is a valid WAV file, false otherwise. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_reader_w_a_v_1a726d7fa9cc02967c064985c1487321fa"/><section>
    <title>CloseWAVFile()</title>
<indexterm><primary>CloseWAVFile</primary><secondary>ReaderWAV</secondary></indexterm>
<indexterm><primary>ReaderWAV</primary><secondary>CloseWAVFile</secondary></indexterm>
<para><computeroutput>void ReaderWAV::CloseWAVFile ( )</computeroutput></para><para>

<para>Closes the WAV file_. </para>
</para>

<para>Closes the WAV file. </para>
</section>
<anchor xml:id="_class_reader_w_a_v_1a9fd66bdaac9e11f0ea3ea64ab6b4f750"/><section>
    <title>GetSamples()</title>
<indexterm><primary>GetSamples</primary><secondary>ReaderWAV</secondary></indexterm>
<indexterm><primary>ReaderWAV</primary><secondary>GetSamples</secondary></indexterm>
<para><computeroutput>bool ReaderWAV::GetSamples (std::vector&lt; int16_t &gt; &amp; samples, uint32_t start, uint32_t end)</computeroutput></para><para>

<para>Reads a portion of audio samples from the WAV file. </para>
</para>

<para>Gets the audio samples from the WAV file.</para>

<para>This method reads a specified range of audio samples from the WAV file and stores them in the provided vector. The range is defined by the start and end seconds. The method calculates the offset in the file where the audio samples start and reads the samples into the vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>samples</entry><entry>
<para>A reference to a vector of int16_t where the audio samples will be stored. </para>
</entry>
                            </row>
                            <row>
<entry>start</entry><entry>
<para>The starting second from which to begin reading audio samples. </para>
</entry>
                            </row>
                            <row>
<entry>end</entry><entry>
<para>The ending second up to which to read audio samples. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if the samples were successfully read, false otherwise.</para>
</formalpara>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>samples</entry><entry>
<para>The vector to store the samples. </para>
</entry>
                            </row>
                            <row>
<entry>start</entry><entry>
<para>The start time in seconds. </para>
</entry>
                            </row>
                            <row>
<entry>end</entry><entry>
<para>The end time in seconds. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if samples were successfully read, false otherwise. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_reader_w_a_v_1af75aa91878df2c24afb5646bf244323f"/><section>
    <title>GetSizeFileInSec()</title>
<indexterm><primary>GetSizeFileInSec</primary><secondary>ReaderWAV</secondary></indexterm>
<indexterm><primary>ReaderWAV</primary><secondary>GetSizeFileInSec</secondary></indexterm>
<para><computeroutput>int ReaderWAV::GetSizeFileInSec ( ) const</computeroutput></para><para>

<para>Calculates the size of the WAV file in seconds. </para>
</para>

<para>Gets the size of the file in seconds.</para>

<para><formalpara><title>Returns</title>

<para>The duration of the audio data in seconds.</para>

<para>The size of the file in seconds. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_reader_w_a_v_1af4bfc648f45dff4c0356ffa2edce1bf4"/><section>
    <title>GetWAVHeader()</title>
<indexterm><primary>GetWAVHeader</primary><secondary>ReaderWAV</secondary></indexterm>
<indexterm><primary>ReaderWAV</primary><secondary>GetWAVHeader</secondary></indexterm>
<para><computeroutput><link linkend="_struct_w_a_v_header">WAVHeader</link> * ReaderWAV::GetWAVHeader ( ) const</computeroutput></para><para>

<para>Retrieves the WAV header. This method returns a pointer to the WAVHeader_. WAV Header defined in file &quot;WAVHeader.h&quot;. </para>
</para>

<para>Gets the WAV header of the file.</para>

<para><formalpara><title>Returns</title>

<para>A pointer to the <link linkend="_struct_w_a_v_header">WAVHeader</link> object. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_reader_w_a_v_1a6a6ac0dc724315a44252779495b85596"/><section>
    <title>OpenWAVFile()</title>
<indexterm><primary>OpenWAVFile</primary><secondary>ReaderWAV</secondary></indexterm>
<indexterm><primary>ReaderWAV</primary><secondary>OpenWAVFile</secondary></indexterm>
<para><computeroutput>void ReaderWAV::OpenWAVFile ( )</computeroutput></para><para>

<para>Opens the WAV file_ for reading. </para>
</para>

<para>Opens the WAV file for reading. </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
3Lab/ReaderWAV.h3Lab/<link linkend="__reader_w_a_v_8cpp">ReaderWAV.cpp</link></section>
</section>
